from supabase import create_client
from langchain.schema.document import Document
from tqdm import tqdm # Import tqdm ƒë·ªÉ hi·ªÉn th·ªã thanh ti·∫øn tr√¨nh n·∫øu b·∫°n mu·ªën
import os
from dotenv import load_dotenv
load_dotenv()
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
def load_documents_from_supabase():

    print("üìÑ ƒêang load documents t·ª´ Supabase...")
    supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
    
    all_docs = []
    page_size = 500  # S·ªë b·∫£n ghi m·ªói l·∫ßn load
    offset = 0       # V·ªã tr√≠ b·∫Øt ƒë·∫ßu

    total_rows_in_db = 0
    try:
        count_response = supabase.table("Book").select("*", count="exact", head=True).execute()
        if count_response and count_response.count is not None:
            total_rows_in_db = count_response.count
            print(f"üìà T·ªïng s·ªë b·∫£n ghi trong b·∫£ng 'Book' tr√™n Supabase: {total_rows_in_db}")
        else:
            print("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y t·ªïng s·ªë b·∫£n ghi t·ª´ Supabase. Ti·∫øp t·ª•c load m√† kh√¥ng c√≥ t·ªïng s·ªë.")
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y t·ªïng s·ªë b·∫£n ghi: {e}. Ti·∫øp t·ª•c load m√† kh√¥ng c√≥ t·ªïng s·ªë.")

    # S·ª≠ d·ª•ng tqdm ƒë·ªÉ hi·ªÉn th·ªã thanh ti·∫øn tr√¨nh n·∫øu total_rows_in_db > 0
    pbar = tqdm(total=total_rows_in_db, unit="docs", desc="ƒêang t·∫£i documents") if total_rows_in_db > 0 else None

    while True:
        try:
            # L·∫•y m·ªôt trang d·ªØ li·ªáu s·ª≠ d·ª•ng .range(start, end)
            # end l√† offset + page_size - 1 v√¨ range l√† inclusive
            response = supabase.table("Book") \
                               .select("book_id, title, description, summary") \
                               .range(offset, offset + page_size - 1) \
                               .execute()
            
            if response.data:
                # Th√™m c√°c b·∫£n ghi ƒë√£ load v√†o danh s√°ch t·ªïng
                for row_data in response.data:
                    content = row_data.get("summary", "") 
                    metadata = {
                        "title": row_data.get("title"),
                        "book_id": str(row_data.get("book_id")),
                        "description": str(row_data.get("description"))
                    }
                    all_docs.append(Document(page_content=content, metadata=metadata))
                
                # C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh
                if pbar:
                    pbar.update(len(response.data))

                # N·∫øu s·ªë b·∫£n ghi nh·∫≠n ƒë∆∞·ª£c √≠t h∆°n page_size, nghƒ©a l√† ƒë√£ h·∫øt d·ªØ li·ªáu
                if len(response.data) < page_size:
                    break 
                
                # TƒÉng offset cho l·∫ßn load ti·∫øp theo
                offset += page_size
            elif response.error:
                print(f"‚ùå L·ªói khi load d·ªØ li·ªáu t·ª´ Supabase: {response.error}")
                break # Tho√°t v√≤ng l·∫∑p n·∫øu c√≥ l·ªói
            else:
                # Kh√¥ng c√≥ d·ªØ li·ªáu v√† kh√¥ng c√≥ l·ªói, nghƒ©a l√† ƒë√£ h·∫øt d·ªØ li·ªáu
                break

        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng mong mu·ªën trong qu√° tr√¨nh load: {e}")
            break # Tho√°t v√≤ng l·∫∑p n·∫øu c√≥ l·ªói ngo·∫°i l·ªá

    if pbar:
        pbar.close() 

    print(f"‚úÖ T·ªïng c·ªông {len(all_docs)} documents ƒë√£ ƒë∆∞·ª£c load t·ª´ Supabase.")
    return all_docs

